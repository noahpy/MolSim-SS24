/*
 * Particle.cpp
 *
 *  Created on: 23.02.2010
 *      Author: eckhardw
 */

#include "Particle.h"

#include "utils/ArrayUtils.h"
#include <iostream>
#include <spdlog/spdlog.h>

// Todo: maybe use initializater list instead of copy?
Particle::Particle(
    std::array<double, 3> x_arg, std::array<double, 3> v_arg, double m_arg, int type_arg)
    : x(x_arg)
    , v(v_arg)
    , m(m_arg)
    , type(type_arg)
    , f({ 0., 0., 0. })
    , old_f({ 0., 0., 0. })
    , active(true)
    , molecular(false)
    , membraneId(0)
{
    spdlog::trace("Particle generated: {} (by args)", toString());
}

Particle::Particle() {
    spdlog::trace("Particle generated (by empty)");
}

Particle::Particle(const Particle& other)
    : x(other.x)
    , v(other.v)
    , m(other.m)
    , type(other.type)
    , f(other.f)
    , old_f(other.old_f)
    , active(other.active)
    , molecular(other.molecular)
    , membraneId(0)
{
    spdlog::trace("Particle generated by copy!");
}

Particle::~Particle()
{
    spdlog::trace("Particle destructed: {}", toString());
}

std::string Particle::toString() const
{
    std::stringstream stream;
    stream << "Particle: X:" << x << " v: " << v << " f: " << f << " old_f: " << old_f
           << " type: " << type << " active: " << active << " m: " << m;
    return stream.str();
}

bool Particle::operator==(Particle& other)
{
    return (x == other.x) and (v == other.v) and (f == other.f) and (type == other.type) and
           (m == other.m) and (old_f == other.old_f);
}

std::ostream& operator<<(std::ostream& stream, Particle& p)
{
    stream << p.toString();
    return stream;
}

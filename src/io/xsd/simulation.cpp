// Copyright (c) 2005-2023 Code Synthesis.
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis gives permission
// to link this program with the Xerces-C++ library (or with modified
// versions of Xerces-C++ that use the same license as Xerces-C++), and
// distribute linked combinations including the two. You must obey the GNU
// General Public License version 2 in all respects for all of the code
// used other than Xerces-C++. If you modify this copy of the program, you
// may extend this exception to your version of the program, but you are
// not obligated to do so. If you do not wish to do so, delete this
// exception statement from your version.
//
// Furthermore, Code Synthesis makes a special exception for the Free/Libre
// and Open Source Software (FLOSS) which is described in the accompanying
// FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simulation.h"

// doubleVec_t
//

const doubleVec_t::x_type& doubleVec_t::
x () const
{
  return this->x_.get ();
}

doubleVec_t::x_type& doubleVec_t::
x ()
{
  return this->x_.get ();
}

void doubleVec_t::
x (const x_type& x)
{
  this->x_.set (x);
}

const doubleVec_t::y_type& doubleVec_t::
y () const
{
  return this->y_.get ();
}

doubleVec_t::y_type& doubleVec_t::
y ()
{
  return this->y_.get ();
}

void doubleVec_t::
y (const y_type& x)
{
  this->y_.set (x);
}

const doubleVec_t::z_type& doubleVec_t::
z () const
{
  return this->z_.get ();
}

doubleVec_t::z_type& doubleVec_t::
z ()
{
  return this->z_.get ();
}

void doubleVec_t::
z (const z_type& x)
{
  this->z_.set (x);
}


// intVec_t
//

const intVec_t::x_type& intVec_t::
x () const
{
  return this->x_.get ();
}

intVec_t::x_type& intVec_t::
x ()
{
  return this->x_.get ();
}

void intVec_t::
x (const x_type& x)
{
  this->x_.set (x);
}

const intVec_t::y_type& intVec_t::
y () const
{
  return this->y_.get ();
}

intVec_t::y_type& intVec_t::
y ()
{
  return this->y_.get ();
}

void intVec_t::
y (const y_type& x)
{
  this->y_.set (x);
}

const intVec_t::z_type& intVec_t::
z () const
{
  return this->z_.get ();
}

intVec_t::z_type& intVec_t::
z ()
{
  return this->z_.get ();
}

void intVec_t::
z (const z_type& x)
{
  this->z_.set (x);
}


// dimension_t
//


// cuboid_t
//

const cuboid_t::pos_type& cuboid_t::
pos () const
{
  return this->pos_.get ();
}

cuboid_t::pos_type& cuboid_t::
pos ()
{
  return this->pos_.get ();
}

void cuboid_t::
pos (const pos_type& x)
{
  this->pos_.set (x);
}

void cuboid_t::
pos (::std::unique_ptr< pos_type > x)
{
  this->pos_.set (std::move (x));
}

const cuboid_t::vel_type& cuboid_t::
vel () const
{
  return this->vel_.get ();
}

cuboid_t::vel_type& cuboid_t::
vel ()
{
  return this->vel_.get ();
}

void cuboid_t::
vel (const vel_type& x)
{
  this->vel_.set (x);
}

void cuboid_t::
vel (::std::unique_ptr< vel_type > x)
{
  this->vel_.set (std::move (x));
}

const cuboid_t::dim_type& cuboid_t::
dim () const
{
  return this->dim_.get ();
}

cuboid_t::dim_type& cuboid_t::
dim ()
{
  return this->dim_.get ();
}

void cuboid_t::
dim (const dim_type& x)
{
  this->dim_.set (x);
}

void cuboid_t::
dim (::std::unique_ptr< dim_type > x)
{
  this->dim_.set (std::move (x));
}

const cuboid_t::mass_type& cuboid_t::
mass () const
{
  return this->mass_.get ();
}

cuboid_t::mass_type& cuboid_t::
mass ()
{
  return this->mass_.get ();
}

void cuboid_t::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const cuboid_t::spacing_type& cuboid_t::
spacing () const
{
  return this->spacing_.get ();
}

cuboid_t::spacing_type& cuboid_t::
spacing ()
{
  return this->spacing_.get ();
}

void cuboid_t::
spacing (const spacing_type& x)
{
  this->spacing_.set (x);
}

const cuboid_t::brownVel_type& cuboid_t::
brownVel () const
{
  return this->brownVel_.get ();
}

cuboid_t::brownVel_type& cuboid_t::
brownVel ()
{
  return this->brownVel_.get ();
}

void cuboid_t::
brownVel (const brownVel_type& x)
{
  this->brownVel_.set (x);
}

const cuboid_t::brownDim_type& cuboid_t::
brownDim () const
{
  return this->brownDim_.get ();
}

cuboid_t::brownDim_type& cuboid_t::
brownDim ()
{
  return this->brownDim_.get ();
}

void cuboid_t::
brownDim (const brownDim_type& x)
{
  this->brownDim_.set (x);
}

void cuboid_t::
brownDim (::std::unique_ptr< brownDim_type > x)
{
  this->brownDim_.set (std::move (x));
}


// sphere_t
//

const sphere_t::center_type& sphere_t::
center () const
{
  return this->center_.get ();
}

sphere_t::center_type& sphere_t::
center ()
{
  return this->center_.get ();
}

void sphere_t::
center (const center_type& x)
{
  this->center_.set (x);
}

void sphere_t::
center (::std::unique_ptr< center_type > x)
{
  this->center_.set (std::move (x));
}

const sphere_t::radius_type& sphere_t::
radius () const
{
  return this->radius_.get ();
}

sphere_t::radius_type& sphere_t::
radius ()
{
  return this->radius_.get ();
}

void sphere_t::
radius (const radius_type& x)
{
  this->radius_.set (x);
}

const sphere_t::mass_type& sphere_t::
mass () const
{
  return this->mass_.get ();
}

sphere_t::mass_type& sphere_t::
mass ()
{
  return this->mass_.get ();
}

void sphere_t::
mass (const mass_type& x)
{
  this->mass_.set (x);
}

const sphere_t::spacing_type& sphere_t::
spacing () const
{
  return this->spacing_.get ();
}

sphere_t::spacing_type& sphere_t::
spacing ()
{
  return this->spacing_.get ();
}

void sphere_t::
spacing (const spacing_type& x)
{
  this->spacing_.set (x);
}


// clusters_t
//

const clusters_t::cuboid_sequence& clusters_t::
cuboid () const
{
  return this->cuboid_;
}

clusters_t::cuboid_sequence& clusters_t::
cuboid ()
{
  return this->cuboid_;
}

void clusters_t::
cuboid (const cuboid_sequence& s)
{
  this->cuboid_ = s;
}

const clusters_t::sphere_sequence& clusters_t::
sphere () const
{
  return this->sphere_;
}

clusters_t::sphere_sequence& clusters_t::
sphere ()
{
  return this->sphere_;
}

void clusters_t::
sphere (const sphere_sequence& s)
{
  this->sphere_ = s;
}


// params_t
//

const params_t::delta_t_optional& params_t::
delta_t () const
{
  return this->delta_t_;
}

params_t::delta_t_optional& params_t::
delta_t ()
{
  return this->delta_t_;
}

void params_t::
delta_t (const delta_t_type& x)
{
  this->delta_t_.set (x);
}

void params_t::
delta_t (const delta_t_optional& x)
{
  this->delta_t_ = x;
}

const params_t::end_time_optional& params_t::
end_time () const
{
  return this->end_time_;
}

params_t::end_time_optional& params_t::
end_time ()
{
  return this->end_time_;
}

void params_t::
end_time (const end_time_type& x)
{
  this->end_time_.set (x);
}

void params_t::
end_time (const end_time_optional& x)
{
  this->end_time_ = x;
}

const params_t::epsilon_optional& params_t::
epsilon () const
{
  return this->epsilon_;
}

params_t::epsilon_optional& params_t::
epsilon ()
{
  return this->epsilon_;
}

void params_t::
epsilon (const epsilon_type& x)
{
  this->epsilon_.set (x);
}

void params_t::
epsilon (const epsilon_optional& x)
{
  this->epsilon_ = x;
}

const params_t::sigma_optional& params_t::
sigma () const
{
  return this->sigma_;
}

params_t::sigma_optional& params_t::
sigma ()
{
  return this->sigma_;
}

void params_t::
sigma (const sigma_type& x)
{
  this->sigma_.set (x);
}

void params_t::
sigma (const sigma_optional& x)
{
  this->sigma_ = x;
}


// simulation_t
//

const simulation_t::params_type& simulation_t::
params () const
{
  return this->params_.get ();
}

simulation_t::params_type& simulation_t::
params ()
{
  return this->params_.get ();
}

void simulation_t::
params (const params_type& x)
{
  this->params_.set (x);
}

void simulation_t::
params (::std::unique_ptr< params_type > x)
{
  this->params_.set (std::move (x));
}

const simulation_t::clusters_type& simulation_t::
clusters () const
{
  return this->clusters_.get ();
}

simulation_t::clusters_type& simulation_t::
clusters ()
{
  return this->clusters_.get ();
}

void simulation_t::
clusters (const clusters_type& x)
{
  this->clusters_.set (x);
}

void simulation_t::
clusters (::std::unique_ptr< clusters_type > x)
{
  this->clusters_.set (std::move (x));
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// doubleVec_t
//

doubleVec_t::
doubleVec_t (const x_type& x,
             const y_type& y,
             const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

doubleVec_t::
doubleVec_t (const doubleVec_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

doubleVec_t::
doubleVec_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void doubleVec_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

doubleVec_t* doubleVec_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class doubleVec_t (*this, f, c);
}

doubleVec_t& doubleVec_t::
operator= (const doubleVec_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

doubleVec_t::
~doubleVec_t ()
{
}

// intVec_t
//

intVec_t::
intVec_t (const x_type& x,
          const y_type& y,
          const z_type& z)
: ::xml_schema::type (),
  x_ (x, this),
  y_ (y, this),
  z_ (z, this)
{
}

intVec_t::
intVec_t (const intVec_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  x_ (x.x_, f, this),
  y_ (x.y_, f, this),
  z_ (x.z_, f, this)
{
}

intVec_t::
intVec_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  x_ (this),
  y_ (this),
  z_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void intVec_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // x
    //
    if (n.name () == "x" && n.namespace_ ().empty ())
    {
      if (!x_.present ())
      {
        this->x_.set (x_traits::create (i, f, this));
        continue;
      }
    }

    // y
    //
    if (n.name () == "y" && n.namespace_ ().empty ())
    {
      if (!y_.present ())
      {
        this->y_.set (y_traits::create (i, f, this));
        continue;
      }
    }

    // z
    //
    if (n.name () == "z" && n.namespace_ ().empty ())
    {
      if (!z_.present ())
      {
        this->z_.set (z_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "x",
      "");
  }

  if (!y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "y",
      "");
  }

  if (!z_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "z",
      "");
  }
}

intVec_t* intVec_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class intVec_t (*this, f, c);
}

intVec_t& intVec_t::
operator= (const intVec_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->x_ = x.x_;
    this->y_ = x.y_;
    this->z_ = x.z_;
  }

  return *this;
}

intVec_t::
~intVec_t ()
{
}

// dimension_t
//

dimension_t::
dimension_t (const ::xml_schema::integer& _xsd_integer_base)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (_xsd_integer_base)
{
}

dimension_t::
dimension_t (const dimension_t& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (x, f, c)
{
}

dimension_t::
dimension_t (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (e, f, c)
{
}

dimension_t::
dimension_t (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (a, f, c)
{
}

dimension_t::
dimension_t (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type > (s, e, f, c)
{
}

dimension_t* dimension_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class dimension_t (*this, f, c);
}

dimension_t::
~dimension_t ()
{
}

// cuboid_t
//

cuboid_t::
cuboid_t (const pos_type& pos,
          const vel_type& vel,
          const dim_type& dim,
          const mass_type& mass,
          const spacing_type& spacing,
          const brownVel_type& brownVel,
          const brownDim_type& brownDim)
: ::xml_schema::type (),
  pos_ (pos, this),
  vel_ (vel, this),
  dim_ (dim, this),
  mass_ (mass, this),
  spacing_ (spacing, this),
  brownVel_ (brownVel, this),
  brownDim_ (brownDim, this)
{
}

cuboid_t::
cuboid_t (::std::unique_ptr< pos_type > pos,
          ::std::unique_ptr< vel_type > vel,
          ::std::unique_ptr< dim_type > dim,
          const mass_type& mass,
          const spacing_type& spacing,
          const brownVel_type& brownVel,
          const brownDim_type& brownDim)
: ::xml_schema::type (),
  pos_ (std::move (pos), this),
  vel_ (std::move (vel), this),
  dim_ (std::move (dim), this),
  mass_ (mass, this),
  spacing_ (spacing, this),
  brownVel_ (brownVel, this),
  brownDim_ (brownDim, this)
{
}

cuboid_t::
cuboid_t (const cuboid_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  pos_ (x.pos_, f, this),
  vel_ (x.vel_, f, this),
  dim_ (x.dim_, f, this),
  mass_ (x.mass_, f, this),
  spacing_ (x.spacing_, f, this),
  brownVel_ (x.brownVel_, f, this),
  brownDim_ (x.brownDim_, f, this)
{
}

cuboid_t::
cuboid_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  pos_ (this),
  vel_ (this),
  dim_ (this),
  mass_ (this),
  spacing_ (this),
  brownVel_ (this),
  brownDim_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void cuboid_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // pos
    //
    if (n.name () == "pos" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< pos_type > r (
        pos_traits::create (i, f, this));

      if (!pos_.present ())
      {
        this->pos_.set (::std::move (r));
        continue;
      }
    }

    // vel
    //
    if (n.name () == "vel" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< vel_type > r (
        vel_traits::create (i, f, this));

      if (!vel_.present ())
      {
        this->vel_.set (::std::move (r));
        continue;
      }
    }

    // dim
    //
    if (n.name () == "dim" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< dim_type > r (
        dim_traits::create (i, f, this));

      if (!dim_.present ())
      {
        this->dim_.set (::std::move (r));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // spacing
    //
    if (n.name () == "spacing" && n.namespace_ ().empty ())
    {
      if (!spacing_.present ())
      {
        this->spacing_.set (spacing_traits::create (i, f, this));
        continue;
      }
    }

    // brownVel
    //
    if (n.name () == "brownVel" && n.namespace_ ().empty ())
    {
      if (!brownVel_.present ())
      {
        this->brownVel_.set (brownVel_traits::create (i, f, this));
        continue;
      }
    }

    // brownDim
    //
    if (n.name () == "brownDim" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< brownDim_type > r (
        brownDim_traits::create (i, f, this));

      if (!brownDim_.present ())
      {
        this->brownDim_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!pos_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "pos",
      "");
  }

  if (!vel_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "vel",
      "");
  }

  if (!dim_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dim",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!spacing_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "spacing",
      "");
  }

  if (!brownVel_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "brownVel",
      "");
  }

  if (!brownDim_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "brownDim",
      "");
  }
}

cuboid_t* cuboid_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class cuboid_t (*this, f, c);
}

cuboid_t& cuboid_t::
operator= (const cuboid_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->pos_ = x.pos_;
    this->vel_ = x.vel_;
    this->dim_ = x.dim_;
    this->mass_ = x.mass_;
    this->spacing_ = x.spacing_;
    this->brownVel_ = x.brownVel_;
    this->brownDim_ = x.brownDim_;
  }

  return *this;
}

cuboid_t::
~cuboid_t ()
{
}

// sphere_t
//

sphere_t::
sphere_t (const center_type& center,
          const radius_type& radius,
          const mass_type& mass,
          const spacing_type& spacing)
: ::xml_schema::type (),
  center_ (center, this),
  radius_ (radius, this),
  mass_ (mass, this),
  spacing_ (spacing, this)
{
}

sphere_t::
sphere_t (::std::unique_ptr< center_type > center,
          const radius_type& radius,
          const mass_type& mass,
          const spacing_type& spacing)
: ::xml_schema::type (),
  center_ (std::move (center), this),
  radius_ (radius, this),
  mass_ (mass, this),
  spacing_ (spacing, this)
{
}

sphere_t::
sphere_t (const sphere_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  center_ (x.center_, f, this),
  radius_ (x.radius_, f, this),
  mass_ (x.mass_, f, this),
  spacing_ (x.spacing_, f, this)
{
}

sphere_t::
sphere_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  center_ (this),
  radius_ (this),
  mass_ (this),
  spacing_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void sphere_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // center
    //
    if (n.name () == "center" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< center_type > r (
        center_traits::create (i, f, this));

      if (!center_.present ())
      {
        this->center_.set (::std::move (r));
        continue;
      }
    }

    // radius
    //
    if (n.name () == "radius" && n.namespace_ ().empty ())
    {
      if (!radius_.present ())
      {
        this->radius_.set (radius_traits::create (i, f, this));
        continue;
      }
    }

    // mass
    //
    if (n.name () == "mass" && n.namespace_ ().empty ())
    {
      if (!mass_.present ())
      {
        this->mass_.set (mass_traits::create (i, f, this));
        continue;
      }
    }

    // spacing
    //
    if (n.name () == "spacing" && n.namespace_ ().empty ())
    {
      if (!spacing_.present ())
      {
        this->spacing_.set (spacing_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!center_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "center",
      "");
  }

  if (!radius_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "radius",
      "");
  }

  if (!mass_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "mass",
      "");
  }

  if (!spacing_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "spacing",
      "");
  }
}

sphere_t* sphere_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class sphere_t (*this, f, c);
}

sphere_t& sphere_t::
operator= (const sphere_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->center_ = x.center_;
    this->radius_ = x.radius_;
    this->mass_ = x.mass_;
    this->spacing_ = x.spacing_;
  }

  return *this;
}

sphere_t::
~sphere_t ()
{
}

// clusters_t
//

clusters_t::
clusters_t ()
: ::xml_schema::type (),
  cuboid_ (this),
  sphere_ (this)
{
}

clusters_t::
clusters_t (const clusters_t& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  cuboid_ (x.cuboid_, f, this),
  sphere_ (x.sphere_, f, this)
{
}

clusters_t::
clusters_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  cuboid_ (this),
  sphere_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void clusters_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // cuboid
    //
    if (n.name () == "cuboid" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< cuboid_type > r (
        cuboid_traits::create (i, f, this));

      this->cuboid_.push_back (::std::move (r));
      continue;
    }

    // sphere
    //
    if (n.name () == "sphere" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< sphere_type > r (
        sphere_traits::create (i, f, this));

      this->sphere_.push_back (::std::move (r));
      continue;
    }

    break;
  }
}

clusters_t* clusters_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class clusters_t (*this, f, c);
}

clusters_t& clusters_t::
operator= (const clusters_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->cuboid_ = x.cuboid_;
    this->sphere_ = x.sphere_;
  }

  return *this;
}

clusters_t::
~clusters_t ()
{
}

// params_t
//

params_t::
params_t ()
: ::xml_schema::type (),
  delta_t_ (this),
  end_time_ (this),
  epsilon_ (this),
  sigma_ (this)
{
}

params_t::
params_t (const params_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  delta_t_ (x.delta_t_, f, this),
  end_time_ (x.end_time_, f, this),
  epsilon_ (x.epsilon_, f, this),
  sigma_ (x.sigma_, f, this)
{
}

params_t::
params_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  delta_t_ (this),
  end_time_ (this),
  epsilon_ (this),
  sigma_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void params_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // delta_t
    //
    if (n.name () == "delta_t" && n.namespace_ ().empty ())
    {
      if (!this->delta_t_)
      {
        this->delta_t_.set (delta_t_traits::create (i, f, this));
        continue;
      }
    }

    // end_time
    //
    if (n.name () == "end_time" && n.namespace_ ().empty ())
    {
      if (!this->end_time_)
      {
        this->end_time_.set (end_time_traits::create (i, f, this));
        continue;
      }
    }

    // epsilon
    //
    if (n.name () == "epsilon" && n.namespace_ ().empty ())
    {
      if (!this->epsilon_)
      {
        this->epsilon_.set (epsilon_traits::create (i, f, this));
        continue;
      }
    }

    // sigma
    //
    if (n.name () == "sigma" && n.namespace_ ().empty ())
    {
      if (!this->sigma_)
      {
        this->sigma_.set (sigma_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }
}

params_t* params_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class params_t (*this, f, c);
}

params_t& params_t::
operator= (const params_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->delta_t_ = x.delta_t_;
    this->end_time_ = x.end_time_;
    this->epsilon_ = x.epsilon_;
    this->sigma_ = x.sigma_;
  }

  return *this;
}

params_t::
~params_t ()
{
}

// simulation_t
//

simulation_t::
simulation_t (const params_type& params,
              const clusters_type& clusters)
: ::xml_schema::type (),
  params_ (params, this),
  clusters_ (clusters, this)
{
}

simulation_t::
simulation_t (::std::unique_ptr< params_type > params,
              ::std::unique_ptr< clusters_type > clusters)
: ::xml_schema::type (),
  params_ (std::move (params), this),
  clusters_ (std::move (clusters), this)
{
}

simulation_t::
simulation_t (const simulation_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  params_ (x.params_, f, this),
  clusters_ (x.clusters_, f, this)
{
}

simulation_t::
simulation_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  params_ (this),
  clusters_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void simulation_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // params
    //
    if (n.name () == "params" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< params_type > r (
        params_traits::create (i, f, this));

      if (!params_.present ())
      {
        this->params_.set (::std::move (r));
        continue;
      }
    }

    // clusters
    //
    if (n.name () == "clusters" && n.namespace_ ().empty ())
    {
      ::std::unique_ptr< clusters_type > r (
        clusters_traits::create (i, f, this));

      if (!clusters_.present ())
      {
        this->clusters_.set (::std::move (r));
        continue;
      }
    }

    break;
  }

  if (!params_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "params",
      "");
  }

  if (!clusters_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "clusters",
      "");
  }
}

simulation_t* simulation_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class simulation_t (*this, f, c);
}

simulation_t& simulation_t::
operator= (const simulation_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->params_ = x.params_;
    this->clusters_ = x.clusters_;
  }

  return *this;
}

simulation_t::
~simulation_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::unique_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, h, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::simulation (isrc, h, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, h, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::simulation (isrc, h, f, p);
}

::std::unique_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::unique_ptr< ::simulation_t > (
    ::simulation (
      std::move (d), f | ::xml_schema::flags::own_dom, p));
}

::std::unique_ptr< ::simulation_t >
simulation (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::unique_ptr< ::simulation_t > (
      ::simulation (
        std::move (d), f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation_t > r (
      ::xsd::cxx::tree::traits< ::simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

::std::unique_ptr< ::simulation_t >
simulation (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    ::std::unique_ptr< ::simulation_t > r (
      ::xsd::cxx::tree::traits< ::simulation_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "simulation",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const doubleVec_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "x",
        e));

    s << ::xml_schema::as_double(i.x ());
  }

  // y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "y",
        e));

    s << ::xml_schema::as_double(i.y ());
  }

  // z
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "z",
        e));

    s << ::xml_schema::as_double(i.z ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const intVec_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "x",
        e));

    s << i.x ();
  }

  // y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "y",
        e));

    s << i.y ();
  }

  // z
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "z",
        e));

    s << i.z ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const dimension_t& i)
{
  e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const dimension_t& i)
{
  a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const dimension_t& i)
{
  l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, char, ::xml_schema::simple_type >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const cuboid_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // pos
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "pos",
        e));

    s << i.pos ();
  }

  // vel
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "vel",
        e));

    s << i.vel ();
  }

  // dim
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dim",
        e));

    s << i.dim ();
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }

  // spacing
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "spacing",
        e));

    s << ::xml_schema::as_double(i.spacing ());
  }

  // brownVel
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "brownVel",
        e));

    s << ::xml_schema::as_double(i.brownVel ());
  }

  // brownDim
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "brownDim",
        e));

    s << i.brownDim ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const sphere_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // center
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "center",
        e));

    s << i.center ();
  }

  // radius
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "radius",
        e));

    s << ::xml_schema::as_double(i.radius ());
  }

  // mass
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "mass",
        e));

    s << ::xml_schema::as_double(i.mass ());
  }

  // spacing
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "spacing",
        e));

    s << ::xml_schema::as_double(i.spacing ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const clusters_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // cuboid
  //
  for (clusters_t::cuboid_const_iterator
       b (i.cuboid ().begin ()), n (i.cuboid ().end ());
       b != n; ++b)
  {
    const clusters_t::cuboid_type& x (*b);

    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cuboid",
        e));

    s << x;
  }

  // sphere
  //
  for (clusters_t::sphere_const_iterator
       b (i.sphere ().begin ()), n (i.sphere ().end ());
       b != n; ++b)
  {
    const clusters_t::sphere_type& x (*b);

    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sphere",
        e));

    s << x;
  }
}

void
operator<< (::xercesc::DOMElement& e, const params_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // delta_t
  //
  if (i.delta_t ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "delta_t",
        e));

    s << ::xml_schema::as_double(*i.delta_t ());
  }

  // end_time
  //
  if (i.end_time ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "end_time",
        e));

    s << ::xml_schema::as_double(*i.end_time ());
  }

  // epsilon
  //
  if (i.epsilon ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "epsilon",
        e));

    s << ::xml_schema::as_double(*i.epsilon ());
  }

  // sigma
  //
  if (i.sigma ())
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "sigma",
        e));

    s << ::xml_schema::as_double(*i.sigma ());
  }
}

void
operator<< (::xercesc::DOMElement& e, const simulation_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // params
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "params",
        e));

    s << i.params ();
  }

  // clusters
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "clusters",
        e));

    s << i.clusters ();
  }
}

void
simulation (::std::ostream& o,
            const ::simulation_t& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulation (::std::ostream& o,
            const ::simulation_t& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation (::std::ostream& o,
            const ::simulation_t& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation (::xercesc::XMLFormatTarget& t,
            const ::simulation_t& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
simulation (::xercesc::XMLFormatTarget& t,
            const ::simulation_t& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation (::xercesc::XMLFormatTarget& t,
            const ::simulation_t& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::simulation (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
simulation (::xercesc::DOMDocument& d,
            const ::simulation_t& s,
            ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "simulation" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "simulation",
      "");
  }
}

::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
simulation (const ::simulation_t& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "simulation",
      "",
      m, f));

  ::simulation (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


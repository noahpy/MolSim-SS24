
#include "models/ParticleContainer.h"
#include "generators/CuboidParticleCluster.h"

/**
 * @brief Class to generate particles for the simulation
 *
 * Example:
 * @code
 * LennardJonesSimulation simLJ = ...
 * CuboidParticleCluster cluster1 = CuboidParticleCluster(std::array<double, 3> {0,0,0}, 40,8,1, 1.1225, 1, std::array<double, 3> {0,0,0}, 0.1, 2);
 * CuboidParticleCluster cluster2 = CuboidParticleCluster(std::array<double, 3> {15,15,0}, 8,8,1, 1.1225, 1, std::array<double, 3> {0,-10,0}, 0.1, 2);
 *
 * ParticleGenerator p = ParticleGenerator(simLJ.container);
 * p.registerCluster(cluster1);
 * p.registerCluster(cluster2);
 * p.generateClusters();
 * @endcode
 */
class ParticleGenerator {
public:
    /**
     * @brief Constructor for the ParticleGenerator class
     * @param container The container to store the particles in
     * @return A ParticleGenerator object
     */
    explicit ParticleGenerator(ParticleContainer& container);
    /**
     * @brief Register a cluster to be generated
     * @details Adds a cluster to the list of clusters to generate. The cluster can be generated by calling generateClusters()
     * @param cluster The cluster to generate
     * @return void
     */
    void registerCluster(const CuboidParticleCluster& cluster);
    /**
     * @brief Generate the clusters into the container specified in the constructor
     * @details Generates the clusters into the container specified in the constructor. The clusters are generated in the order they were registered and the vector containing the clusters will be cleared after the generation
     * @attention This will set the vector of particles in the container. Call this method before inserting single particles that do not belong to a cluster
     * @return void
     */
    void generateClusters();

private:
    ParticleContainer& container; /**< The container to store the particles in */
    std::vector<CuboidParticleCluster> clusters; /**< The clusters to generate */
};
